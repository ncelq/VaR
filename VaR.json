{"paragraphs":[{"text":"import org.apache.spark.sql.hive.thriftserver._\nimport org.apache.spark.sql.hive.HiveContext\n\nclass VaR99 extends org.apache.spark.sql.expressions.UserDefinedAggregateFunction {\n  // This is the input fields for your aggregate function.\n  override def inputSchema: org.apache.spark.sql.types.StructType =\n    org.apache.spark.sql.types.StructType(org.apache.spark.sql.types.StructField(\"value\", org.apache.spark.sql.types.LongType) :: Nil)\n\n  // This is the internal fields you keep for computing your aggregate.\n  override def bufferSchema: org.apache.spark.sql.types.StructType = org.apache.spark.sql.types.StructType(\n        org.apache.spark.sql.types.StructType(org.apache.spark.sql.types.StructField(\"list\", org.apache.spark.sql.types.ArrayType(org.apache.spark.sql.types.LongType, true), true) :: Nil)\n  )\n\n  // This is the output type of your aggregatation function.\n  override def dataType: org.apache.spark.sql.types.DataType = org.apache.spark.sql.types.LongType\n\n  override def deterministic: Boolean = true\n\n  // This is the initial value for your buffer schema.\n  override def initialize(buffer: org.apache.spark.sql.expressions.MutableAggregationBuffer): Unit = {\n        buffer(0) = IndexedSeq[Long]()\n  }\n\n  // This is how to update your buffer schema given an input.\n  override def update(buffer: org.apache.spark.sql.expressions.MutableAggregationBuffer, input: org.apache.spark.sql.Row): Unit = {\n         if (buffer != null) {\n            val seq = buffer(0).asInstanceOf[IndexedSeq[Long]]\n                buffer(0) = input.getAs[Long](0) +: seq\n        }\n  }\n\n  // This is how to merge two objects with the bufferSchema type.\n  override def merge(buffer1: org.apache.spark.sql.expressions.MutableAggregationBuffer, buffer2: org.apache.spark.sql.Row): Unit = {\n     if (buffer1(0) != null && buffer2 != null) {\n            val seq1 = buffer1(0).asInstanceOf[IndexedSeq[Long]]\n            val seq2 = buffer2(0).asInstanceOf[IndexedSeq[Long]]\n        buffer1(0) = seq1 ++ seq2\n}\n  }\n\n  // This is where you output the final value, given the final value of your bufferSchema.\n  override def evaluate(buffer: org.apache.spark.sql.Row): Any = {\n      buffer(0).asInstanceOf[IndexedSeq[Long]].sortWith(_ < _)(3)\n  }\n}\n\nval sqlContext = new org.apache.spark.sql.SQLContext(sc)\n//val sqlContext = new HiveContext(sc)\n\nsqlContext.udf.register(\"VaR99\", new VaR99)\n\n","user":"anonymous","dateUpdated":"2017-07-23T16:48:10+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","tableHide":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark.sql.hive.thriftserver._\n\nimport org.apache.spark.sql.hive.HiveContext\n\ndefined class VaR99\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@1ec4a6f6\n\nres55: org.apache.spark.sql.expressions.UserDefinedAggregateFunction = VaR99@513b322f\n"}]},"apps":[],"jobName":"paragraph_1500820053493_-1954522493","id":"20170723-142733_460029376","dateCreated":"2017-07-23T14:27:33+0000","dateStarted":"2017-07-23T16:48:02+0000","dateFinished":"2017-07-23T16:48:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1244"},{"text":"\n\n\nimport org.apache.commons.io.IOUtils\nimport java.net.URL\nimport java.nio.charset.Charset\n\n// Zeppelin creates and injects sc (SparkContext) and sqlContext (HiveContext or SqlContext)\n// So you don't need create them manually\n\n// load pnl data\nval pnlText = sc.parallelize(\n    IOUtils.toString(\n        new URL(\"https://s3.amazonaws.com/spark-43541281/standardvar.csv\"),\n        Charset.forName(\"utf8\")).split(\"\\r\\n\"))\n\ncase class Pnl(CobDate: String, AssetClass: String, Product: String, Currency: String, PTSBook: String, TradeId: String, Book: String, Entity: String, Region: String, Scenario: String, Pnl: Integer)\n\nval pnl = pnlText.map(s => s.split(\",\")).map(\n    s => Pnl(s(0), \n            s(1),\n            s(2),\n            s(3),\n            s(4),\n            s(5),\n            s(6),\n            s(7),\n            s(8),\n            s(9),\n            s(10).toInt\n        )\n).toDF()\npnl.registerTempTable(\"pnl\")","user":"anonymous","dateUpdated":"2017-07-23T16:36:54+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.commons.io.IOUtils\n\nimport java.net.URL\n\nimport java.nio.charset.Charset\n\npnlText: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[43] at parallelize at <console>:50\n\ndefined class Pnl\n\npnl: org.apache.spark.sql.DataFrame = [CobDate: string, AssetClass: string ... 9 more fields]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1500820057115_1796040433","id":"20170723-142737_1780382607","dateCreated":"2017-07-23T14:27:37+0000","dateStarted":"2017-07-23T15:57:58+0000","dateFinished":"2017-07-23T15:58:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1245"},{"text":"%sql\nselect Region, AssetClass, VaR99(Pnls) from (\nselect Region, AssetClass, Scenario, sum(Pnl) as Pnls from Pnl group by Region, AssetClass, Scenario\n) group by Region, AssetClass order by Region\n","user":"anonymous","dateUpdated":"2017-07-23T16:39:13+0000","config":{"colWidth":6,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":288,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false}},"commonSetting":{},"keys":[{"name":"Region","index":0,"aggr":"sum"}],"groups":[{"name":"AssetClass","index":1,"aggr":"sum"}],"values":[{"name":"var99(Pnls)","index":2,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text","title":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1500822926773_297601275","id":"20170723-151526_986249703","dateCreated":"2017-07-23T15:15:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1246","dateFinished":"2017-07-23T16:12:48+0000","dateStarted":"2017-07-23T16:12:42+0000","title":"VaR per Region & Asset Class","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Region\tAssetClass\tvar99(Pnls)\nEMEA\tEQ\t1080183\nEMEA\tIR\t1915096\nEMEA\tCS\t1827445\nEMEA\tFX\t1613097\nHBAP\tEQ\t872504\nHBAP\tIR\t805289\nHBAP\tFX\t544769\nHBAP\tCS\t1186542\nLATAM\tIR\t614549\nLATAM\tEQ\t113759\nLATAM\tFX\t333353\nLATAM\tCS\t240358\nNA\tEQ\t397438\nNA\tCS\t479083\nNA\tFX\t527778\nNA\tIR\t536455\n"}]}},{"text":"%sql\nselect Region, VaR99(Pnls) from (\nselect Region, Scenario, sum(Pnl) as Pnls from Pnl group by Region, Scenario\n) group by Region\n","user":"anonymous","dateUpdated":"2017-07-23T16:42:40+0000","config":{"colWidth":6,"enabled":true,"results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1500825264235_-553323207","id":"20170723-155424_1639489662","dateCreated":"2017-07-23T15:54:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1841","dateFinished":"2017-07-23T16:14:52+0000","dateStarted":"2017-07-23T16:14:40+0000","title":"VaR Per Region","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Region\tvar99(Pnls)\nHBAP\t4120206\nNA\t2420747\nLATAM\t1761266\nEMEA\t7350037\n"}]}},{"text":"%sql\nselect Book, VaR99(Pnls) as VaR99  from (\nselect Book, Scenario, sum(Pnl) as Pnls from Pnl group by Book, Scenario\n) group by Book order by VaR99 LIMIT 5","user":"anonymous","dateUpdated":"2017-07-23T16:38:15+0000","config":{"colWidth":4,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","title":true,"tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1500826680035_-975372493","id":"20170723-161800_1562375554","dateCreated":"2017-07-23T16:18:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5628","dateFinished":"2017-07-23T16:35:21+0000","dateStarted":"2017-07-23T16:35:16+0000","title":"Top 5 Worst Book","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Book\tVaR99\nBOOK_PAR_0024\t153277\nBOOK_HKH_1823\t407256\nBOOK_MEX_8747\t417234\nBOOK_BRZ_32423\t419478\nBOOK_HTDE_8575\t438151\n"}]}},{"text":"%sql\nselect Region, Entity, VaR99(Pnls) from (\nselect Region, Entity, Scenario, sum(Pnl) as Pnls from Pnl group by Region, Entity, Scenario\n) group by Region, Entity","user":"anonymous","dateUpdated":"2017-07-23T16:47:12+0000","config":{"colWidth":8,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"stacked":false},"stackedAreaChart":{"style":"stack"}},"commonSetting":{},"keys":[{"name":"Entity","index":1,"aggr":"sum"}],"groups":[],"values":[{"name":"var99(Pnls)","index":2,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/text","tableHide":false,"title":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1500826991203_-1069203083","id":"20170723-162311_840572046","dateCreated":"2017-07-23T16:23:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6252","dateFinished":"2017-07-23T16:43:12+0000","dateStarted":"2017-07-23T16:42:59+0000","title":"VaR per Entity","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Region\tEntity\tvar99(Pnls)\nLATAM\tARGENTINA\t485660\nHBAP\tSINGAPORE\t725892\nHBAP\tHONG KONG\t2158513\nLATAM\tBRAZIL\t419478\nHBAP\tHANG SENG HONG KONG\t812379\nNA\tNEW YORK\t1448942\nEMEA\tPARIS\t1703468\nEMEA\tHTDE\t438151\nNA\tCANADA\t798931\nEMEA\tLONDON\t4666004\nLATAM\tMEXICO\t417234\n"}]}},{"text":"%sql\n","user":"anonymous","dateUpdated":"2017-07-23T16:28:53+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1500827333666_1921756601","id":"20170723-162853_1700450336","dateCreated":"2017-07-23T16:28:53+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7099"}],"name":"VaR","id":"2CPMKFSX8","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}